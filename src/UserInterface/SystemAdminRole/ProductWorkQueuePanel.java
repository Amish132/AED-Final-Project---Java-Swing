/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SystemAdminRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Customer.Customer;
import Business.Organization.AdminOrganization;
import Business.Organization.Organization;
import Business.Organization.SupplierOrganization;
import Business.Product.Product;
import Business.Role.SupplierRole;
import Business.Supplier.Supplier;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CustomerSupplierWorkRequest;
import Business.WorkQueue.NewProductWorkRequest;
import Business.WorkQueue.ProductWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dhair
 */
public class ProductWorkQueuePanel extends javax.swing.JPanel {

    /**
     * Creates new form ProductWorkQueuePanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    private SupplierOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Network network;
    private AdminOrganization adminOrganization;
    private UserAccount ua;

    ProductWorkQueuePanel(JPanel userProcessContainer, Organization org, Network network, UserAccount ua) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.network = network;
        this.ua = ua;
        //   this.organization = (SupplierOrganization)org;
        this.organization = network.getSupplierOrganization();
        this.adminOrganization = network.getAdminOrganization();
        populate();
        populateSupplier();
//        this.organization = organization;
//        this.enterprise = enterprise;
//        this.userAccount = userAccount;
    }

    public void populate() {
        DefaultTableModel dtm = (DefaultTableModel) tblOldSupplier.getModel();
        dtm.setRowCount(0);
        for (WorkRequest work : adminOrganization.getWorkQueue().getNewProductWorkRequest()) {
            if (work instanceof NewProductWorkRequest) {
                Object[] row = new Object[7];
                row[0] = ((NewProductWorkRequest) work).getProductCategory();
                row[1] = ((NewProductWorkRequest) work).getProductID();
                row[2] = ((NewProductWorkRequest) work);
                row[3] = ((NewProductWorkRequest) work).getQuantity();
                row[4] = ((NewProductWorkRequest) work).getPrice();
                row[5] = ((NewProductWorkRequest) work).getSupplier();
                row[6] = ((NewProductWorkRequest) work).getStatus();
                dtm.addRow(row);
            }
        }

    }

    public void populateSupplier() {
        DefaultTableModel dtm = (DefaultTableModel) tblNewSupplier.getModel();
        dtm.setRowCount(0);
        for (WorkRequest work : adminOrganization.getWorkQueue().getCustomerSupplierWorkQueue()) {
            if (work instanceof CustomerSupplierWorkRequest) {
                Object[] row = new Object[3];
                row[0] = ((CustomerSupplierWorkRequest) work).getCustomer();
                row[1] = ((CustomerSupplierWorkRequest) work).getUsername();
                row[2] = ((CustomerSupplierWorkRequest) work).getPassword();

                dtm.addRow(row);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNewSupplier = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOldSupplier = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnDeleteRequest = new javax.swing.JButton();
        btnAcceptProduct = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnCustomerRequest = new javax.swing.JButton();

        jLabel1.setText("Products Work Queue");

        jLabel2.setText("New Supplier Work Queue");

        tblNewSupplier.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Name", "Username", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblNewSupplier);

        tblOldSupplier.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CATEGORY", "PRODUCT ID", "PRODUCT NAME", "QUANTITY", "PRICE", "SUPPLIER", "STATUS", "COMPLETED BY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblOldSupplier);

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/SystemAdminRole/back.png"))); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnDeleteRequest.setText("Cancel Request");
        btnDeleteRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRequestActionPerformed(evt);
            }
        });

        btnAcceptProduct.setText("Accept product");
        btnAcceptProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptProductActionPerformed(evt);
            }
        });

        btnDel.setText("Delete Request");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        btnCustomerRequest.setText("Accept Request");
        btnCustomerRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCustomerRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(37, 37, 37)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 874, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnBack)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 872, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCustomerRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDeleteRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAcceptProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteRequest)
                    .addComponent(btnAcceptProduct))
                .addGap(83, 83, 83)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDel)
                    .addComponent(btnCustomerRequest))
                .addGap(155, 155, 155)
                .addComponent(btnBack)
                .addGap(38, 38, 38))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRequestActionPerformed
        int selectedRow = tblOldSupplier.getSelectedRow();
        try {
            if (selectedRow >= 0) {
                NewProductWorkRequest npwr = (NewProductWorkRequest) (tblOldSupplier.getValueAt(selectedRow, 2));

                for (WorkRequest work : adminOrganization.getWorkQueue().getNewProductWorkRequest()) {
                    if (work instanceof NewProductWorkRequest) {
                        if(!work.getStatus().equals("Completed")){
                        adminOrganization.getWorkQueue().getNewProductWorkRequest().remove(npwr);
                        populate();
                        break;}
                        else{
                            JOptionPane.showMessageDialog(null, "Request has been completed, cannot remove now!");
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a Product!");
            }
        } catch (Error e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnDeleteRequestActionPerformed

    private void btnAcceptProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptProductActionPerformed
        int selectedRow = tblOldSupplier.getSelectedRow();
        try {
            if (selectedRow >= 0) {
                NewProductWorkRequest pwr = (NewProductWorkRequest) (tblOldSupplier.getValueAt(selectedRow, 2));
                String productName = (tblOldSupplier.getValueAt(selectedRow, 2)).toString();
                String supplierName = String.valueOf(tblOldSupplier.getValueAt(selectedRow, 5));
                int count =0;
//                for (Network n : system.getNetworkList()) {
//                    for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
//                        if (e.getEnterpriseType().getValue().equalsIgnoreCase("Party")) {
//                            for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
//                                if (o.getName().equalsIgnoreCase("Supplier Organization")) {
//                                    SupplierOrganization organization = (SupplierOrganization) o;
                for (Supplier s : organization.getListOfSupplier()) {
                    if (s.getName().equalsIgnoreCase(supplierName)) {
                        for (Product p : s.getListOfProducts().keySet()) {
                            if (p.getName().equalsIgnoreCase(productName)) {
                                JOptionPane.showMessageDialog(null, "The product already exists!");
                                count++;
                                break;
                            }
                        }
                        if(count==0){
                        String prodCategory = String.valueOf(tblOldSupplier.getValueAt(selectedRow, 0));
                        int prodQty = Integer.parseInt(tblOldSupplier.getValueAt(selectedRow, 3).toString());
                        double prodPrice = Double.parseDouble(tblOldSupplier.getValueAt(selectedRow, 4).toString());
                        String prodID = (tblOldSupplier.getValueAt(selectedRow, 1).toString());
                        Product p  = s.addProduct(productName, prodQty);
                        p.setCate(prodCategory);
                        p.setPrice(prodPrice);
                        p.setProdId(prodID);
                        
                        
                        pwr.setMessage("Request completed by :" + ua.getUsername());
                        pwr.setStatus("Completed");
                        for (WorkRequest work : organization.getWorkQueue().getCustomerSupplierWorkQueue()) {
                            if (work instanceof NewProductWorkRequest && ((NewProductWorkRequest) work).equals(work)) {
                                organization.getWorkQueue().getNewProductWorkRequest().remove(work);
                                JOptionPane.showMessageDialog(null, "Request Removed Successfully!!!");
                                break;
                            }
                        }
                        populate();
                        break;
                        }
                    }
                }
//                                }
//                            }
//                        }
//                    }
//                }
                JOptionPane.showMessageDialog(null, "Product successfully added to Supplier Catalog!!");

            } else {
                JOptionPane.showMessageDialog(null, "Please select a Product!");
            }
        } catch (Error e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_btnAcceptProductActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        int selectedRow = tblNewSupplier.getSelectedRow();
        try {
            if (selectedRow >= 0) {
                Customer customer = (Customer) (tblNewSupplier.getValueAt(selectedRow, 0));
                for (WorkRequest work : organization.getWorkQueue().getCustomerSupplierWorkQueue()) {
                    if (work instanceof CustomerSupplierWorkRequest && ((CustomerSupplierWorkRequest) work).getCustomer().equals(customer)) {
                        organization.getWorkQueue().getCustomerSupplierWorkQueue().remove(work);
                        JOptionPane.showMessageDialog(null, "Request Removed Successfully!!!");
                        break;
                    }
                }

            } else {
                JOptionPane.showMessageDialog(null, "Please select a request to Delete!!");
            }
        } catch (Error e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnCustomerRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCustomerRequestActionPerformed
        int selectedRow = tblNewSupplier.getSelectedRow();
        try {
            if (selectedRow >= 0) {
                Customer customer = (Customer) (tblNewSupplier.getValueAt(selectedRow, 0));
                String username = String.valueOf(tblNewSupplier.getValueAt(selectedRow, 1));
                String password = String.valueOf(tblNewSupplier.getValueAt(selectedRow, 2));

                if (!network.getSupplierOrganization().getUserAccountDirectory().checkIfUsernameIsUnique(username)) {
                    JOptionPane.showMessageDialog(null, "Username not unique, cant proceed!!");
                } else {
                    Supplier s = network.getSupplierOrganization().addSupplier(customer.getCustomerName());
                    UserAccount ua = network.getSupplierOrganization().getUserAccountDirectory().createUserAccount(username, password, new SupplierRole());
                    s.setUa(ua);
                    for (WorkRequest work : organization.getWorkQueue().getCustomerSupplierWorkQueue()) {
                        if (work instanceof CustomerSupplierWorkRequest && ((CustomerSupplierWorkRequest) work).getCustomer().equals(customer)) {
                            organization.getWorkQueue().getCustomerSupplierWorkQueue().remove(work);
                            populateSupplier();
                            JOptionPane.showMessageDialog(null, "Account created successfully!!!");
                            break;
                        }
                    }

                }

            } else {
                JOptionPane.showMessageDialog(null, "Please select a Customer Account!");
            }
        } catch (Error e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_btnCustomerRequestActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptProduct;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCustomerRequest;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnDeleteRequest;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblNewSupplier;
    private javax.swing.JTable tblOldSupplier;
    // End of variables declaration//GEN-END:variables
}
