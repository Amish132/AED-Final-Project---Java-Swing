/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerRole;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.Network.Network;
import Business.Order.MasterOrderCatalogue;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.SupplierOrganization;
import Business.Product.Product;
import Business.Supplier.Supplier;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.OrderWorkRequest;
import Business.WorkQueue.ProductWorkRequest;
import UserInterface.SystemAdminRole.ProductWorkQueuePanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dhair
 */
public class CustomerShoppingPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerShoppingPanel
     */
    
    ArrayList<Product> salesLists;
    //private JPanel userProcessContainer;
   // private Business b;
    private Customer selectedCustomer;
    private CustomerDirectory cd;
    private SupplierOrganization so;
    //private ProductCatalogue pc;
    private Supplier sup, selectedSupplier;
    private Order order; 
    private OrderItem oi;
    private MasterOrderCatalogue moc;
   private JPanel userProcessContainer;
    private UserAccount account;
    private Network network;
    
    
    private boolean isCheckedOut = false;
    
    public CustomerShoppingPanel(JPanel userProcessContainer, UserAccount account,Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.network = network;
        so = network.getSupplierOrganization();
        order = new Order();
        SupplierComboBox();
        
        for(Customer c: network.getCustomerOrganization().getCd().getCustomerDirectory())
        {
            if(c.getUa().equals(account))
            selectedCustomer = c;
            break;
    }
    }
    
    
 public ArrayList getUniqueArrayList(ArrayList arrayList) {
        Set set = new HashSet();
        ArrayList uniqueItemsList = new ArrayList();
        for (Iterator iterator = arrayList.iterator(); iterator.hasNext();) {
            Object object = iterator.next();
            if (set.add(object)) {
                uniqueItemsList.add(object);
            }
        }
        arrayList.clear();
        arrayList.addAll(uniqueItemsList);
        return arrayList;
    }
    
    public void SupplierComboBox() 
    {
        supplierComboBox.removeAllItems();
        for (Supplier sup : so.getListOfSupplier()) {
            supplierComboBox.addItem(sup);
            
        }
    }
    
    
     public void populateTableList(Supplier supplier) {
        
        DefaultTableModel dtm = (DefaultTableModel) tblProductList.getModel();
        dtm.setRowCount(0);

          //  Supplier sup = (Supplier) supplierComboBox.getSelectedItem();
            for (Product p : supplier.getListOfProducts().keySet()) {
            Object row[] = new Object[6];
            row[0] = p;
            row[1] = p.getName();
            row[2] = p.getDesc();
            row[3] = p.getCate();
            row[4] = p.getQuantity();
            row[5] = p.getPrice();
            //  row[3] = p.getDepature();

            //Adding Rows --> table
            dtm.addRow(row);
        }
        
    }
    
    public void refreshOrderTable() {
        DefaultTableModel model = (DefaultTableModel) tblOrder.getModel();
        model.setRowCount(0);
//        for (OrderItem oi : order.getOrderItemList()) {
//            Object row[] = new Object[4];
//            row[0] = oi;
//            row[1] = oi.getSalesPrice();
//            row[2] = oi.getQuantity();
//            row[3] = oi.getQuantity() * oi.getSalesPrice();
//            
//            model.addRow(row);
            
            for (OrderItem oi : order.getOrderItemList()) {
            Object row[] = new Object[5];
            row[0] = oi;
            row[1] = oi.getQuantity();
            row[2] = oi.getQuantity() * oi.getProduct().getPrice();
            model.addRow(row);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        quantitySpinner = new javax.swing.JSpinner();
        btnAddtoCart = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        lblCategory = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        supplierComboBox = new javax.swing.JComboBox();
        btnMngQty = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductList = new javax.swing.JTable();
        btnCheckOut = new javax.swing.JButton();
        btnback = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        btnAddtoCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/CustomerRole/cart.png"))); // NOI18N
        btnAddtoCart.setText("   Add to Cart");
        btnAddtoCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddtoCartActionPerformed(evt);
            }
        });

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PRODUCT NAME", "QUANTITY", "TOTAL AMOUNT"
            }
        ));
        jScrollPane2.setViewportView(tblOrder);

        lblCategory.setText("     Category");

        btnMngQty.setText("Manage Quantity");
        btnMngQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMngQtyActionPerformed(evt);
            }
        });

        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        tblProductList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PRODUCT ID", "PRODUCT NAME", "DESCRIPTION", "CATEGORY", "QUANTITY", "PRICE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblProductList);

        btnCheckOut.setText("CheckOut");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        btnback.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/CustomerRole/back.png"))); // NOI18N
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        jLabel1.setText("Provide Quantity:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(126, 126, 126)
                                .addComponent(btnMngQty)
                                .addGap(18, 18, 18)
                                .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemove)
                                .addGap(18, 18, 18)
                                .addComponent(btnCheckOut))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(225, 225, 225)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(78, 78, 78)
                                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(312, 312, 312)
                                        .addComponent(btnAddtoCart, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(btnback)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCategory)
                    .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelect))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddtoCart)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMngQty)
                    .addComponent(btnRemove)
                    .addComponent(btnCheckOut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                .addComponent(btnback)
                .addGap(75, 75, 75))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddtoCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddtoCartActionPerformed
        // TODO add your handling code here:
        selectedSupplier = (Supplier)supplierComboBox.getSelectedItem();
          int selectedRow = tblProductList.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a product");
            return;
        }
        
        Product selectedProduct = (Product) tblProductList.getValueAt(selectedRow, 0);
        
        int fetchQuantity = (Integer) quantitySpinner.getValue();
        if (fetchQuantity <= 0) {
            JOptionPane.showMessageDialog(null, "Quantity cannot be zero");
            return;
        }
        
        try {
            
            if (fetchQuantity <= selectedProduct.getQuantity()) {
                boolean alreadyPresent = false;
                for (OrderItem oi : order.getOrderItemList()) {
                    if (oi.getProduct() == selectedProduct) {
                        int oldAvail = selectedProduct.getQuantity();
                        int newAvail = oldAvail - fetchQuantity;
                        selectedProduct.setQuantity(newAvail);
                        oi.setQuantity(fetchQuantity + oi.getQuantity());
                        alreadyPresent = true;
                        populateTableList(selectedSupplier);
                        refreshOrderTable();
                        quantitySpinner.setValue(0);
                        JOptionPane.showMessageDialog(null, "Order added to cart successfully");
                        break;
                    }
                }
                
                if (!alreadyPresent) {
                    int oldAvail = selectedProduct.getQuantity();
                    int newAvail = oldAvail - fetchQuantity;
                    selectedProduct.setQuantity(newAvail);
                    order.addOrderItem(selectedProduct, fetchQuantity);
                    populateTableList(selectedSupplier);
                    refreshOrderTable();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Quantity is more than Availability");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid Sales Price");
            return;
        }
    }//GEN-LAST:event_btnAddtoCartActionPerformed

    private void btnMngQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMngQtyActionPerformed
        // TODO add your handling code here:
           int selectedRow = tblOrder.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "No product in cart!");
            return;
        }
        
        OrderItem oi = (OrderItem) tblOrder.getValueAt(selectedRow, 0);
        int currentAvail = oi.getProduct().getQuantity();
        int oldQty = oi.getQuantity();
        int newQty = Integer.parseInt(quantityField.getText());
        if (newQty > (currentAvail + oldQty)) {
            JOptionPane.showMessageDialog(null, "Quantity is more than availablity");
            return;
        } else {
            if (newQty <= 0) {
                JOptionPane.showMessageDialog(null, "Quantity should be greater than zero");
                return;
            }
            
            oi.setQuantity(newQty);
            oi.getProduct().setQuantity(currentAvail + (oldQty - newQty));
            populateTableList(selectedSupplier);
            refreshOrderTable();
        }
         quantityField.setText("");
    }//GEN-LAST:event_btnMngQtyActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
           if (order.getOrderItemList().size() > 0) {
//            selectedCustomer= ua.
            order.setCustomer(selectedCustomer);
               OrderWorkRequest owr = new OrderWorkRequest();
               owr.setCustomer(selectedCustomer);
               owr.setOrder(order);
//            order.setSp(selectedSupplier);
//            order.getSp().getWorkQueue().getOrderWorkQueue().add(owr);
            so.getWorkQueue().getOrderWorkQueue().add(owr);
           // System.out.println("Serve cust : "+order.getMarket().toString());
            //moc.addOrder(order);
            JOptionPane.showMessageDialog(null, "Order Placed Successfully!!");
            order = new Order();
            refreshOrderTable();
            //(selectedSupplier);
            isCheckedOut = true;
            
        } else {
            JOptionPane.showMessageDialog(null, "No Order Placed!!");
        }
        
        
    }//GEN-LAST:event_btnCheckOutActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
          int row = tblOrder.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please Select a row");
        }
        OrderItem oi = (OrderItem) tblOrder.getValueAt(row, 0);
        int oldAvail = oi.getProduct().getQuantity();
        int oldQty = oi.getQuantity();
        int newQty = oldAvail + oldAvail;
        oi.getProduct().setQuantity(newQty);
        order.removeOrderItem(oi);
        JOptionPane.showMessageDialog(null, "Order Removed from the cart");
        refreshOrderTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        populateTableList((Supplier)supplierComboBox.getSelectedItem());
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnbackActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddtoCart;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnMngQty;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnback;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JTextField quantityField;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JComboBox supplierComboBox;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTable tblProductList;
    // End of variables declaration//GEN-END:variables
}
